package handling;

import client.inventory.MapleInventoryType;
import constants.GameConstants;
import handling.auction.AuctionHandler;
import handling.cashshop.handler.BuyCashItemHandler;
import handling.cashshop.handler.CashShopOperation;
import handling.cashshop.handler.CouponCodeHandler;
import handling.channel.MonsterCollectionHandler;
import handling.channel.handler.*;
import handling.login.handler.*;
import handling.opcode.RecvPacketOpcode;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import packet.LoginPacket;
import packet.MTSCSPacket;
import packet.MaplePacketCreator;
import scripting.npc.NPCScriptManager;
import server.MapleInventoryManipulator;

import static handling.opcode.RecvPacketOpcode.*;

public final class PacketProcessor {

    private static final Logger log = LogManager.getLogger(PacketProcessor.class);

    static MaplePacketHandler[] getProcessor(ServerType type) {
        MaplePacketHandler[] h = new MaplePacketHandler[RecvPacketOpcode.Count.getValue() + 1];

        register(h, CP_AliveAck, (slea, c, cs) -> c.pongReceived());
        register(h, CP_ExceptionLog, (slea, c, cs) -> ClientErrorLogHandler.handlePacket(slea, c));
        register(h, CP_ClientDumpLog, (slea, c, cs) -> PacketErrorHandler.handlePacket(slea, c));
        register(h, CLIENT_CRASH, (slea, c, cs) -> log.info("玩家客戶端崩潰：accId=" + c.getAccID() + ", player=" + c.getPlayer()));
        register(h, CP_MigrateIn, (slea, c, cs) -> InterServerHandler.Loggedin(slea, c, type));
        register(h, CLOSE_WINDOW, (slea, c, cs) -> PlayerHandler.GameExit(c));
        register(h, SET_ACC_CASH, (slea, c, cs) -> ShowAccCash.handlePacket(slea, c));
        register(h, QUICK_BUY_CS_ITEM, (slea, c, cs) -> PlayerHandler.quickBuyCashShopItem(slea, c, c.getPlayer()));
        switch (type) {
            case LoginServer:
                register(h, SecurityPacket, (slea, c, cs) -> SecurityPacketHandler.handlePacket(slea, c, type));
                register(h, CP_CheckLoginAuthInfo, (slea, c, cs) -> LoginPasswordHandler.handlePacket(slea, c));
                register(h, REQUEST_CONNECTION, (slea, c, cs) -> c.announce(LoginPacket.addConnection()));
                register(h, SERVERSTATUS_REQUEST, (slea, c, cs) -> ServerStatusRequestHandler.handlePacket(slea, c));
                register(h, CP_SelectWorld, (slea, c, cs) -> SelectWorldHandler.handlePacket(slea, c));
                register(h, CP_WorldInfoRequest, (slea, c, cs) -> WorldInfoRequestHandler.handlePacket(slea.readByte(), c));
                register(h, CP_LogoutWorld, (slea, c, cs) -> LogoutWorldHandler.handlePacket(c));
                register(h, CP_CheckSPWExistRequest, (slea, c, cs) -> c.announce(LoginPacket.checkSPWExistResult(3, 0)));
                register(h, CP_CheckSPWOnCreateNewCharacter, (slea, c, cs) -> CreateChar2Pw.handlePacket(slea, c));
                register(h, CP_CheckDuplicatedID, (slea, c, cs) -> CheckCharNameHandler.handlePacket(slea, c));
                register(h, CP_CreateNewCharacter, (slea, c, cs) -> CreateCharHandler.handlePacket(slea, c));
                register(h, CP_UpdateCharacterSelectList, (slea, c, cs) -> UpdatePlayerSlots.handlePacket(slea));
                register(h, CP_DeleteCharacter, (slea, c, cs) -> DeleteCharHandler.handlePacket(slea, c));
                register(h, CP_ReservedDeleteCharacterConfirm, (slea, c, cs) -> DeleteCharHandler.ReservedDeleteCharacterConfirm(slea, c));
                register(h, CP_ReservedDeleteCharacterCancel, (slea, c, cs) -> DeleteCharHandler.ReservedDeleteCharacterCancel(slea, c));
                register(h, SET_GENDER, (slea, c, cs) -> SetGenderHandler.handlePacket(slea, c));
                register(h, LICENSE_REQUEST, (slea, c, cs) -> LicenseRequestHandler.handlePacket(slea, c));
                register(h, CP_SelectCharacter, (slea, c, cs) -> CharSelectedHandler.handlePacket(slea, c));
                register(h, CP_DirectGoToField, (slea, c, cs) -> CharSelectedHandler.handlePacket(slea, c));
                register(h, LOGIN_AUTHKEY, (slea, c, cs) -> LoginPasswordHandler.handlerAuthKey(slea, c));
                register(h, CREATE_VERIFY, (slea, c, cs) -> SecurityPacketHandler.CreateVerify(slea, c));
                register(h, GAME_EXIT, (slea, c, cs) -> PlayerHandler.GameExit(c));
                break;
            case CashShopServer:
                register(h, CP_PetMove, (slea, c, cs) -> PetHandler.MovePet(slea, c.getPlayer()));
                register(h, CP_Messenger, (slea, c, cs) -> ChatHandler.Messenger(slea, c));
                register(h, CP_MemoRequest, (slea, c, cs) -> ChatHandler.MemoRequest(slea, c, c.getPlayer()));
                register(h, CP_CashShopQueryCashRequest, (slea, c, cs) -> CashShopOperation.CSUpdate(c));
                register(h, CP_CashShopChargeParamRequest, (slea, c, cs) -> CashShopOperation.openRechargeWeb(c));
                register(h, CP_UserTransferFieldRequest, (slea, c, cs) -> CashShopOperation.LeaveCS(slea, c, c.getPlayer()));
                register(h, CP_CashShopCashItemRequest, (slea, c, cs) -> BuyCashItemHandler.CashShopCashItemRequest(slea, c, c.getPlayer()));
                register(h, CP_CashShopGiftMateInfoRequest, (slea, c, cs) -> BuyCashItemHandler.商城送禮(slea, c, c.getPlayer()));
                register(h, CP_CashShopCheckMileageRequest, (slea, c, cs) -> CashShopOperation.CheckMileageRequest(c));
                register(h, CP_CashShopCheckCouponRequest, (slea, c, cs) -> CouponCodeHandler.handlePacket(slea, c, c.getPlayer()));
                register(h, CP_MVP_SpecialPack_Request, (slea, c, cs) -> BuyCashItemHandler.ReceiveMvpLevelPacket(slea, c.getPlayer()));
                register(h, MVP_RoyalPack_Request, (slea, c, cs) -> BuyCashItemHandler.ReceiveMvpLevelPacket(slea, c.getPlayer()));
                register(h, MVP_GradePack_Request, (slea, c, cs) -> BuyCashItemHandler.ReceiveMvpGradePacket(c.getPlayer()));
                register(h, OPEN_AVATAR_RANDOM_BOX, (slea, c, cs) -> BuyCashItemHandler.openAvatarRandomBox(slea, c, c.getPlayer()));
                break;
            case AuctionServer:
                register(h, CP_AuctionRequest, (slea, c, cs) -> AuctionHandler.AuctionRequest(slea, c, c.getPlayer()));
                register(h, CP_AuctionExit, (slea, c, cs) -> AuctionHandler.AuctionExit(slea, c, c.getPlayer()));
                break;
            case ChannelServer:
                register(h, CP_MemoRequest, (slea, c, cs) -> ChatHandler.MemoRequest(slea, c, c.getPlayer()));
                register(h, CP_MemoInGameRequest, (slea, c, cs) -> ChatHandler.MemoRequest(slea, c, c.getPlayer()));
                register(h, CP_PassiveskillInfoUpdate, (slea, c, cs) -> PlayerHandler.PassiveSkillInfoUpdate(slea, c, c.getPlayer()));
                register(h, CP_UserTransferChannelRequest, (slea, c, cs) -> InterServerHandler.ChangeChannel(slea, c, c.getPlayer()));
                register(h, CP_UserMigrateToCashShopRequest, (slea, c, cs) -> InterServerHandler.enterCS(c, c.getPlayer()));
                register(h, CP_UserMigrateToAuctionRequest, (slea, c, cs) -> AuctionHandler.EnterAuctionRequest(c, c.getPlayer()));
                register(h, CP_UserReturnEffectResponse, (slea, c, cs) -> ItemScrollHandler.ReturnEffectConfirm(slea, c, c.getPlayer()));
                register(h, CP_RequestReloginCookie, (slea, c, cs) -> InterServerHandler.ChangePlayer(slea, c));
                register(h, CP_UserMove, (slea, c, cs) -> PlayerHandler.MovePlayer(slea, c, c.getPlayer()));
                register(h, CP_UserCharacterInfoRequest, (slea, c, cs) -> PlayerHandler.CharInfoRequest(slea, c, c.getPlayer()));
                register(h, CP_UserMeleeAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, CP_UserMeleeAttack));
                register(h, CP_UserShootAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, CP_UserShootAttack));
                register(h, CP_UserMagicAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, CP_UserMagicAttack));
                register(h, CP_SummonedAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, CP_SummonedAttack));
                register(h, CP_UserBodyAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, CP_UserBodyAttack));
                register(h, CP_UserAreaDotAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, CP_UserAreaDotAttack));
                register(h, UserSpotlightAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, UserSpotlightAttack));
                register(h, UserNonTargetForceAtomAttack, (slea, c, cs) -> PlayerHandler.attackProcessing(slea, c, UserNonTargetForceAtomAttack));
                register(h, CP_UserSkillUseRequest, (slea, c, cs) -> UserSkillUseHandler.userSkillUseRequest(slea, c, c.getPlayer()));
                register(h, CP_UserRequestInstanceTable, (slea, c, cs) -> ItemMakerHandler.ProfessionInfo(slea, c, c.getPlayer()));
                register(h, CRAFT_DONE, (slea, c, cs) -> ItemMakerHandler.CraftComplete(slea, c, c.getPlayer()));
                register(h, CRAFT_MAKE, (slea, c, cs) -> ItemMakerHandler.CraftMake(slea, c, c.getPlayer()));
                register(h, CRAFT_EFFECT, (slea, c, cs) -> ItemMakerHandler.CraftEffect(slea, c, c.getPlayer()));
                register(h, CP_GatherRequest, (slea, c, cs) -> ItemMakerHandler.StartHarvest(slea, c, c.getPlayer()));
                register(h, CP_GatherEndNotice, (slea, c, cs) -> ItemMakerHandler.StopHarvest(slea, c, c.getPlayer()));
                register(h, CP_DecomposerRequest, (slea, c, cs) -> ItemMakerHandler.MakeExtractor(slea, c, c.getPlayer()));
                register(h, CP_UserEquipmentEnchantWithSingleUIRequest, (slea, c, cs) -> ItemScrollHandler.UseEquipEnchanting(slea, c, c.getPlayer()));
                register(h, CP_UserBagItemUseRequest, (slea, c, cs) -> ItemMakerHandler.UseBag(slea, c, c.getPlayer()));
                register(h, CP_UserRecipeOpenItemUseRequest, (slea, c, cs) -> ItemMakerHandler.UseRecipe(slea, c, c.getPlayer()));
                register(h, USE_NEBULITE, (slea, c, cs) -> InventoryHandler.UseNebulite(slea, c, c.getPlayer()));
                register(h, CP_AndroidMove, (slea, c, cs) -> PlayerHandler.MoveAndroid(slea, c, c.getPlayer()));
                register(h, CP_FoxManActionSetUseRequest, (slea, c, cs) -> SummonHandler.FoxManActionSetUseRequest(slea, c.getPlayer()));
                register(h, CP_UserEmotion, (slea, c, cs) -> PlayerHandler.ChangeEmotion(slea.readInt(), c.getPlayer()));
                register(h, CP_AndroidEmotion, (slea, c, cs) -> PlayerHandler.ChangeAndroidEmotion(slea.readInt(), c.getPlayer()));
                register(h, CP_UserHit, (slea, c, cs) -> TakeDamageHandler.TakeDamage(slea, c, c.getPlayer()));
                register(h, CP_UserChangeStatRequest, (slea, c, cs) -> PlayerHandler.Heal(slea, c.getPlayer()));
                register(h, CP_UserSkillFinishRequest, (slea, c, cs) -> PlayerHandler.SpecialSkillUse(slea, c.getPlayer()));
                register(h, CP_UserSkillCancelRequest, (slea, c, cs) -> PlayerHandler.CancelBuffHandler(slea.readInt(), c.getPlayer()));
                register(h, CP_UserEffectLocal, (slea, c, cs) -> PlayerHandler.CancelMech(slea, c.getPlayer()));
                register(h, USE_AFFECTED_AREA_REQUEST, (slea, c, cs) -> PlayersHandler.UseAffectedArea(slea, c, c.getPlayer()));
                register(h, CP_UserStatChangeItemCancelRequest, (slea, c, cs) -> PlayerHandler.CancelItemEffect(slea.readInt(), c.getPlayer()));
                register(h, CP_UserPortableChairSitRequest, (slea, c, cs) -> PlayerHandler.UseChair(slea, c, c.getPlayer()));
                register(h, CP_UserSitRequest, (slea, c, cs) -> PlayerHandler.CancelChair(slea.readShort(), c, c.getPlayer()));
                register(h, CP_UserActivateEffectItem, (slea, c, cs) -> PlayerHandler.UseItemEffect(slea, c, c.getPlayer()));
                register(h, CP_UserActivateNickItem, (slea, c, cs) -> PlayerHandler.UseTitleEffect(slea, c, c.getPlayer()));
                register(h, CP_MicroBuffEndTime, (slea, c, cs) -> PlayerHandler.MicroBuffEndTime(slea, c.getPlayer()));
                //register(h, CP_UserActivateDamageSkin, (slea, c, cs) -> PlayerHandler.UseActivateDamageSkin(slea, c.getPlayer()));
                //register(h, USE_ACTIVATE_DAMAGE_SKIN_PREMIUM, (slea, c, cs) -> PlayerHandler.UseActivateDamageSkinPremium(slea, c.getPlayer()));
                register(h, CP_UserDamageSkinSaveRequest, (slea, c, cs) -> PlayerHandler.UserSaveDamageSkin(slea, c, c.getPlayer()));
                register(h, DEMIANOBJECT_MAKE_ENTER_ACK, (slea, c, cs) -> PlayerHandler.DemianObjectMakeEnterAck(slea, c.getPlayer()));
                register(h, DEMIANOBJECT_NODE_END, (slea, c, cs) -> PlayerHandler.DemianObjectNodeEnd(slea, c.getPlayer()));
                register(h, CP_UserSkillPrepareRequest, (slea, c, cs) -> PlayerHandler.UserSkillPrepareRequest(slea, c, c.getPlayer()));
                register(h, SUPER_CANNON_REQUEST, (slea, c, cs) -> PlayerHandler.UserSupserCannotRequest(slea, c.getPlayer()));
                register(h, CP_QuickslotKeyMappedModified, (slea, c, cs) -> PlayerHandler.QuickSlot(slea, c.getPlayer()));
                register(h, CP_FuncKeyMappedModified, (slea, c, cs) -> PlayerHandler.ChangeKeymap(slea, c.getPlayer()));
                register(h, CP_UserTransferFieldRequest, (slea, c, cs) -> PlayerHandler.ChangeMap(slea, c, c.getPlayer()));
                register(h, CP_UserPortalScriptRequest, (slea, c, cs) -> PlayerHandler.ChangeMapSpecial(slea, c, c.getPlayer()));
                register(h, CP_UserPortalTeleportRequest, (slea, c, cs) -> PlayerHandler.InnerPortal(slea, c, c.getPlayer()));
                register(h, CP_UserMapTransferRequest, (slea, c, cs) -> PlayerHandler.TrockAddMap(slea, c, c.getPlayer()));
                register(h, CP_UserAntiMacroItemUseRequest, (slea, c, cs) -> PlayersHandler.LieDetector(slea, c, c.getPlayer(), true));
                register(h, CP_UserAntiMacroSkillUseRequest, (slea, c, cs) -> PlayersHandler.LieDetector(slea, c, c.getPlayer(), false));
                register(h, CP_UserAntiMacroQuestionResult, (slea, c, cs) -> PlayersHandler.LieDetectorResponse(slea, c));
                register(h, CP_UserAntiMacroRefreshRequest, (slea, c, cs) -> PlayersHandler.LieDetectorRefresh(slea, c));
                register(h, USER_HOWLING_STORM_STACK, (slea, c, cs) -> PlayerHandler.UserHowlingStormStack(slea, c.getPlayer()));
                register(h, CP_UserSelectAndroid, (slea, c, cs) -> PlayerHandler.AndroidShop(slea, c.getPlayer()));
                register(h, CP_UserCompleteNpcSpeech, (slea, c, cs) -> PlayerHandler.CompleteNpcSpeech(slea, c.getPlayer()));
                register(h, AUTO_USE_JUDGEMENT, (slea, c, cs) -> PlayerHandler.UserJudgement(slea, c.getPlayer()));
                register(h, CP_RequestIncCombo, (slea, c, cs) -> PlayerHandler.AranCombo(c, c.getPlayer(), 5));
                register(h, CP_RequestDecCombo, (slea, c, cs) -> PlayerHandler.AranCombo(c, c.getPlayer(), -10));
                register(h, CP_UserThrowGrenade, (slea, c, cs) -> PlayerHandler.UserThrowGrenade(slea, c, c.getPlayer()));
                register(h, CP_UserDestroyGrenade, (slea, c, cs) -> PlayerHandler.UserDestroyGrenade(slea, c.getPlayer()));
                register(h, CP_UserMacroSysDataModified, (slea, c, cs) -> PlayerHandler.ChangeSkillMacro(slea, c.getPlayer()));
                register(h, CP_UserDropMoneyRequest, (slea, c, cs) -> {
                             slea.readInt();
                             PlayerHandler.DropMeso(slea.readInt(), c.getPlayer());
                         }
                );
                register(h, CP_UserGivePopularityRequest, (slea, c, cs) -> PlayersHandler.GiveFame(slea, c, c.getPlayer()));
                register(h, TRANSFORM_PLAYER, (slea, c, cs) -> PlayersHandler.TransformPlayer(slea, c, c.getPlayer()));
                register(h, CP_EnterTownPortalRequest, (slea, c, cs) -> PlayersHandler.requestEnterTownPortal(slea, c.getPlayer()));
                register(h, CP_EnterRandomPortalRequest, (slea, c, cs) -> PlayersHandler.EnterRandomPortalRequest(slea, c.getPlayer()));
                register(h, CP_EnterOpenGateRequest, (slea, c, cs) -> PlayersHandler.UseMechDoor(slea, c.getPlayer()));
                register(h, CP_ReactorHit, (slea, c, cs) -> PlayersHandler.HitReactor(slea, c));
                register(h, CP_ReactorClick, (slea, c, cs) -> PlayersHandler.TouchReactor(slea, c));
                register(h, CP_ReactorRectInMob, (slea, c, cs) -> PlayersHandler.ReactorRectInMob(slea, c));
                register(h, CP_RuneStoneUseReq, (slea, c, cs) -> PlayersHandler.UseRune(slea, c.getPlayer()));
                register(h, CP_RuneStoneSkillReq, (slea, c, cs) -> PlayersHandler.UseRuneSkillReq(slea, c.getPlayer()));
                register(h, USE_RUNE_ACTION, (slea, c, cs) -> PlayersHandler.UseRuneAction(slea, c.getPlayer()));
                register(h, MOBZONESTATE_RESULT, (slea, c, cs) -> PlayersHandler.MobZoneStateResult(slea, c.getPlayer()));
                register(h, PeacemakerHeal, (slea, c, cs) -> PlayersHandler.PeacemakerHeal(slea, c.getPlayer()));
                register(h, CP_UserADBoardClose, (slea, c, cs) -> c.getPlayer().setChalkboard(null));
                register(h, CP_UserGatherItemRequest, (slea, c, cs) -> InventoryHandler.ItemGather(slea, c));
                register(h, CP_UserSortItemRequest, (slea, c, cs) -> InventoryHandler.ItemSort(slea, c));
                register(h, CP_UserChangeSlotPositionRequest, (slea, c, cs) -> InventoryHandler.ItemMove(slea, c));
                register(h, CP_UserPopOrPushBagItemToInven, (slea, c, cs) -> InventoryHandler.MoveBag(slea, c));
                register(h, CP_UserBagToBagItem, (slea, c, cs) -> InventoryHandler.SwitchBag(slea, c));
                register(h, CP_UserItemMakeRequest, (slea, c, cs) -> ItemMakerHandler.ItemMaker(slea, c));
                register(h, CP_DropPickUpRequest, (slea, c, cs) -> InventoryHandler.Pickup_Player(slea, c, c.getPlayer()));
                register(h, CP_UserToadsHammerRequest, (slea, c, cs) -> InventoryHandler.UseToadsHammer(slea, c.getPlayer()));
                register(h, CP_UserToadsHammerHelpRequest, (slea, c, cs) -> NPCScriptManager.getInstance().dispose(c));
                register(h, CP_UserConsumeCashItemUseRequest, (slea, c, cs) -> UseCashItemHandler.handlePacket(slea, c, c.getPlayer()));
                register(h, CP_UserAdditionalSlotExtendItemUseRequest, (slea, c, cs) -> InventoryHandler.UseAdditionalAddItem(slea, c, c.getPlayer()));
                register(h, CP_UserStatChangeItemUseRequest, (slea, c, cs) -> InventoryHandler.UseItem(slea, c, c.getPlayer()));
                register(h, CP_UserConsumeHairItemUseRequest, (slea, c, cs) -> InventoryHandler.UseCosmetic(slea, c, c.getPlayer()));
                register(h, LapidificationStateChange, (slea, c, cs) -> PlayersHandler.LapidificationStateChange(slea, c.getPlayer()));
                register(h, CP_UserRequestCharacterPotentialSkillRandSet, (slea, c, cs) -> InventoryHandler.UseReducer(slea, c, c.getPlayer()));
                register(h, UserRequestCharacterPotentialSkillRandStatSet, (slea, c, cs) -> InventoryHandler.UseResetLevelReducer(slea, c, c.getPlayer()));
                register(h, CP_UserRequestCharacterPotentialSkillRandSetUI, (slea, c, cs) -> InventoryHandler.UseReducerPrestige(slea, c, c.getPlayer()));
                register(h, CP_UserItemReleaseRequest, (slea, c, cs) -> InventoryHandler.UseMagnify(slea, c, c.getPlayer()));
                register(h, CP_UserMemorialCubeOptionRequest, (slea, c, cs) -> InventoryHandler.applyBlackCube(slea, c, c.getPlayer()));
                register(h, CP_UserScriptItemUseRequest, (slea, c, cs) -> InventoryHandler.UseScriptedNPCItem(slea, c, c.getPlayer()));
                register(h, CP_UserPortalScrollUseRequest, (slea, c, cs) -> InventoryHandler.UseReturnScroll(slea, c, c.getPlayer()));
                register(h, CP_UserUpgradeItemUseRequest, (slea, c, cs) -> ItemScrollHandler.handlePacket(slea, c, c.getPlayer(), false));
                register(h, CP_UserExItemUpgradeItemUseRequest, (slea, c, cs) -> ItemScrollHandler.handlePacket(slea, c, c.getPlayer(), false));
                register(h, CP_UserUpgradeAssistItemUseRequest, (slea, c, cs) -> ItemScrollHandler.handlePacket(slea, c, c.getPlayer(), true));
                register(h, CP_UserItemOptionUpgradeItemUseRequest, (slea, c, cs) -> ItemScrollHandler.handlePacket(slea, c, c.getPlayer(), false));
                register(h, CP_UserAdditionalOptUpgradeItemUseRequest, (slea, c, cs) -> ItemScrollHandler.handlePacket(slea, c, c.getPlayer(), false));
                register(h, CP_UserHyperUpgradeItemUseRequest, (slea, c, cs) -> ItemScrollHandler.handlePacket(slea, c, c.getPlayer(), false));
                register(h, CP_UserItemSlotExtendItemUseRequest, (slea, c, cs) -> InventoryHandler.UseAdditionalItem(slea, c, c.getPlayer()));
                register(h, CP_UserWeaponTempItemOptionRequest, (slea, c, cs) -> InventoryHandler.UserWeaponTempItemOptionRequest(slea, c, c.getPlayer()));
                register(h, CP_UserItemSkillSocketUpgradeItemUseRequest, (slea, c, cs) -> InventoryHandler.UserItemSkillSocketUpgradeItemUseRequest(slea, c, c.getPlayer()));
                register(h, CP_UserItemSkillOptionUpgradeItemUseRequest, (slea, c, cs) -> InventoryHandler.UserItemSkillOptionUpgradeItemUseRequest(slea, c, c.getPlayer()));
                register(h, CP_UserFreeMiracleCubeItemUseRequest, (slea, c, cs) -> InventoryHandler.UseMiracleCube(slea, c.getPlayer()));
                register(h, CP_UserMobSummonItemUseRequest, (slea, c, cs) -> InventoryHandler.UseSummonBag(slea, c, c.getPlayer()));
                register(h, USE_TREASUER_CHEST, (slea, c, cs) -> InventoryHandler.UseTreasureChest(slea, c, c.getPlayer()));
                register(h, CP_UserSkillLearnItemUseRequest, (slea, c, cs) -> {
                    c.getPlayer().updateTick(slea.readInt());
                    InventoryHandler.UseSkillBook(slea.readShort(), slea.readInt(), c, c.getPlayer());
                });
                register(h, CP_UserSkillResetItemUseRequest, (slea, c, cs) -> {
                    c.getPlayer().updateTick(slea.readInt());
                    InventoryHandler.UseSpReset(slea.readShort(), slea.readInt(), c, c.getPlayer());
                });
                register(h, CP_UserAbilityResetItemUseRequest, (slea, c, cs) -> {
                    c.getPlayer().updateTick(slea.readInt());
                    InventoryHandler.UseApReset(slea.readShort(), slea.readInt(), c, c.getPlayer());
                });
                register(h, CP_UserCharSlotIncItemUseRequest, (slea, c, cs) -> {
                    client.inventory.Item item = c.getPlayer().getInventory(MapleInventoryType.USE).getItem(slea.readShort());
                    int itemID = slea.readInt();
                    if (item!= null && item.getItemId() == itemID && (itemID == 2350000 || itemID == 2350001 || itemID == 2350003 || itemID == 2430441 || itemID == 2437028)) {
                        if (c.getAccCharSlots() >= GameConstants.MAX_CHARS_SLOTS) {
                            c.getPlayer().dropMessage(1, "角色欄位已達上限。");
                        } else if (!MapleInventoryManipulator.removeFromSlot(c, MapleInventoryType.USE, item.getPosition(), (short) 1, false) || !c.gainAccCharSlot()) {
                            c.getPlayer().dropMessage(1, "發生未知錯誤。");
                        } else {
                            c.getPlayer().dropMessage(1, "角色欄位已擴充 (目前:" + c.getAccCharSlots() + "個)");
                        }
                    } else {
                        c.getPlayer().dropMessage(1, "發生未知錯誤。");
                    }
                });
                register(h, CP_UserBridleItemUseRequest, (slea, c, cs) -> InventoryHandler.UseCatchItem(slea, c, c.getPlayer()));
                register(h, CP_UserTamingMobFoodItemUseRequest, (slea, c, cs) -> InventoryHandler.UseMountFood(slea, c, c.getPlayer()));
                register(h, REWARD_ITEM, (slea, c, cs) -> InventoryHandler.UseRewardItem(slea.readShort(), slea.readInt(), c, c.getPlayer()));
                register(h, CP_CrossHunterShopRequest, (slea, c, cs) -> InventoryHandler.BuyCrossHunterItem(slea, c, c.getPlayer()));
                register(h, CP_MobMove, (slea, c, cs) -> MobHandler.MoveMonster(slea, c, c.getPlayer()));
                register(h, CP_MobApplyCtrl, (slea, c, cs) -> MobHandler.MobApplyCtrl(slea.readInt(), c.getPlayer()));
                register(h, CP_MobSelfDestruct, (slea, c, cs) -> MobHandler.MobSelfDestruct(slea.readInt(), c.getPlayer()));
                register(h, CP_MobAreaAttackDisease, (slea, c, cs) -> MobHandler.MobAreaAttackDisease(slea, c.getPlayer()));
                register(h, CP_UserShopRequest, (slea, c, cs) -> NPCHandler.NPCShop(slea, c, c.getPlayer()));
                register(h, CP_UserSelectNpc, (slea, c, cs) -> NPCHandler.NPCTalk(slea, c, c.getPlayer()));
                register(h, CP_UserScriptMessageAnswer, (slea, c, cs) -> NPCHandler.userScriptMessageAnswer(slea, c));
                register(h, CP_NpcMove, (slea, c, cs) -> NPCHandler.NPCAnimation(slea, c));
                register(h, CP_UserQuestRequest, (slea, c, cs) -> NPCHandler.QuestAction(slea, c, c.getPlayer()));
                register(h, CP_UserMedalReissueRequest, (slea, c, cs) -> PlayerHandler.ReIssueMedal(slea, c, c.getPlayer()));
                register(h, CP_UserTrunkRequest, (slea, c, cs) -> NPCHandler.Storage(slea, c, c.getPlayer()));
                register(h, CP_UserChat, (slea, c, cs) -> ChatHandler.UserChat(slea, c, c.getPlayer(), false));
                register(h, CP_UserItemChat, (slea, c, cs) -> ChatHandler.UserChat(slea, c, c.getPlayer(), true));
                register(h, CP_GroupMessage, (slea, c, cs) -> ChatHandler.Others(slea, c, c.getPlayer(), false));
                register(h, CP_GroupItemMessage, (slea, c, cs) -> ChatHandler.Others(slea, c, c.getPlayer(), true));
                register(h, CP_Whisper, (slea, c, cs) -> ChatHandler.Whisper_Find(slea, c, false));
                register(h, CP_ItemWhisper, (slea, c, cs) -> ChatHandler.Whisper_Find(slea, c, true));
                register(h, CP_Messenger, (slea, c, cs) -> ChatHandler.Messenger(slea, c));
//                register(h, CP_LikePoint, (slea, c, cs) -> ChatHandler.ShowLoveRank(slea, c));
                register(h, CP_RequestArrowPlaterObj, (slea, c, cs) -> PlayerHandler.SpawnArrowsTurret(slea, c, c.getPlayer()));
                register(h, USE_GROWTH_HELPER_REQUEST, (slea, c, cs) -> PlayerHandler.UserGrowthHelperRequest(slea, c, c.getPlayer()));
                register(h, ENTER_STARTPLANET, (slea, c, cs) -> {
                    c.sendEnableActions();
                    c.dropMessage("此功能暫未開放！");
                });
                register(h, TRACK_FLAMES, (slea, c, cs) -> PlayerHandler.showTrackFlames(slea, c, c.getPlayer()));
                register(h, CP_UserAbilityMassUpRequest, (slea, c, cs) -> StatsHandling.AutoAssignAP(slea, c, c.getPlayer()));
                register(h, CP_UserAbilityUpRequest, (slea, c, cs) -> StatsHandling.DistributeAP(slea, c, c.getPlayer()));
                register(h, CP_UserSkillUpRequest, (slea, c, cs) -> StatsHandling.DistributeSP(slea, c, c.getPlayer()));
                register(h, CP_UserHyperStatSkillUpRequest, (slea, c, cs) -> {
                    c.getPlayer().updateTick(slea.readInt());
                    StatsHandling.DistributeHyperAP(slea.readInt(), slea.readInt(), c, c.getPlayer());
                });
                register(h, CP_UserHyperSkillUpRequest, (slea, c, cs) -> {
                    c.getPlayer().updateTick(slea.readInt());
                    StatsHandling.DistributeHyperSP(slea.readInt(), c, c.getPlayer());
                });
                register(h, CP_UserHyperSkillResetRequset, (slea, c, cs) -> StatsHandling.ResetHyperSP(slea, c, c.getPlayer()));
                register(h, CP_UserHyperStatSkillResetRequest, (slea, c, cs) -> StatsHandling.ResetHyperAP(c, c.getPlayer(), false));
                register(h, CP_MiniRoom, (slea, c, cs) -> PlayerInteractionHandler.PlayerInteraction(slea, c, c.getPlayer()));
                register(h, CP_GuildRequest, (slea, c, cs) -> GuildHandler.Guild(slea, c));
                register(h, CP_GuildResult, (slea, c, cs) -> {
                    slea.skip(1);
                    GuildHandler.DenyGuildRequest(slea.readMapleAsciiString(), c);
                });
                register(h, CP_GuildJoinRequest, (slea, c, cs) -> GuildHandler.GuildApply(slea, c));
                register(h, CP_GuildJoinAccept, (slea, c, cs) -> GuildHandler.AcceptGuildApply(slea, c));
                register(h, CP_GuildJoinReject, (slea, c, cs) -> GuildHandler.DenyGuildApply(slea, c));
                register(h, CP_MakeEnterFieldPacketForQuickMove, (slea, c, cs) -> NPCHandler.OpenQuickMoveNpc(slea, c, c.getPlayer()));
                register(h, CP_UserQuickMoveScript, (slea, c, cs) -> NPCHandler.OpenQuickMoveNpcScript(slea, c, c.getPlayer()));
                register(h, BBS_OPERATION, (slea, c, cs) -> BBSHandler.BBSOperation(slea, c));
                register(h, SELECT_JAGUAR, (slea, c, cs) -> PlayerHandler.selectJaguar(slea, c, c.getPlayer()));
                register(h, GIVE_KSPSYCHIC, (slea, c, cs) -> PlayerHandler.showKSPsychicGrabHanlder(slea, c, c.getPlayer()));
                register(h, ATTACK_KSPSYCHIC, (slea, c, cs) -> PlayerHandler.showKSPsychicAttackHanlder(slea, c, c.getPlayer()));
                register(h, CANCEL_KSPSYCHIC, (slea, c, cs) -> PlayerHandler.showKSPsychicReleaseHanlder(slea, c, c.getPlayer()));
                register(h, GIVE_KSULTIMATE, (slea, c, cs) -> PlayerHandler.showGiveKSUltimate(slea, c, c.getPlayer()));
                register(h, ATTACK_KSULTIMATE, (slea, c, cs) -> PlayerHandler.showAttackKSUltimate(slea, c, c.getPlayer()));
                register(h, MIST_KSULTIMAT, (slea, c, cs) -> PlayerHandler.showKSMonsterEffect(slea, c, c.getPlayer()));
                register(h, CANCEL_KSULTIMATE, (slea, c, cs) -> PlayerHandler.showCancelKSUltimate(slea, c, c.getPlayer()));
                register(h, TORNADO_KSULTIMATE, (slea, c, cs) -> PlayerHandler.showTornadoKSUltimate(slea, c, c.getPlayer()));
                register(h, CP_PartyRequest, (slea, c, cs) -> PartyHandler.PartyOperation(slea, c));
                register(h, CP_PartyResult, (slea, c, cs) -> PartyHandler.DenyPartyRequest(slea, c));
                register(h, CP_PartyInvitableSet, (slea, c, cs) -> PartyHandler.AllowPartyInvite(slea, c));
                register(h, CP_FriendRequest, (slea, c, cs) -> BuddyListHandler.BuddyOperation(slea, c));
                register(h, CP_UserRequestCreateItemPot, (slea, c, cs) -> ItemMakerHandler.UsePot(slea, c));
                register(h, CP_UserRequestRemoveItemPot, (slea, c, cs) -> ItemMakerHandler.ClearPot(slea, c));
                register(h, CP_UserRequestIncItemPotLifeSatiety, (slea, c, cs) -> ItemMakerHandler.FeedPot(slea, c));
                register(h, CP_UserRequestCureItemPotLifeSick, (slea, c, cs) -> ItemMakerHandler.CurePot(slea, c));
                register(h, CP_UserRequestComplateToItemPot, (slea, c, cs) -> ItemMakerHandler.RewardPot(slea, c));
                register(h, CP_SkillPetMove, (slea, c, cs) -> SummonHandler.SkillPetMove(slea, c.getPlayer()));
                register(h, CP_SkillPetAction, (slea, c, cs) -> SummonHandler.SkillPetAction(slea, c, c.getPlayer()));
                register(h, CP_SummonedHit, (slea, c, cs) -> SummonHandler.DamageSummon(slea, c.getPlayer()));
                register(h, CP_SummonedMove, (slea, c, cs) -> SummonHandler.MoveSummon(slea, c.getPlayer()));
                register(h, CP_DragonMove, (slea, c, cs) -> SummonHandler.MoveDragon(slea, c.getPlayer()));
                register(h, CP_DragonGlide, (slea, c, cs) -> SummonHandler.DragonFly(slea, c.getPlayer()));
                register(h, CP_SummonedSkill, (slea, c, cs) -> SummonHandler.SummonedSkill(slea, c, c.getPlayer()));
                register(h, SummonedMagicAltar, (slea, c, cs) -> SummonHandler.SummonedMagicAltar(slea, c, c.getPlayer()));
                register(h, CP_SummonedRemove, (slea, c, cs) -> SummonHandler.RemoveSummon(slea, c));
                register(h, CP_SummonedAction, (slea, c, cs) -> SummonHandler.SummonedAction(slea, c, c.getPlayer()));
                register(h, SummonedSarahAction, (slea, c, cs) -> SummonHandler.SummonedSarahAction(slea, c, c.getPlayer()));
                register(h, SummonedJavelinAction, (slea, c, cs) -> SummonHandler.SummonedJavelinAction(slea, c, c.getPlayer()));
                register(h, CP_UserActivatePetRequest, (slea, c, cs) -> PetHandler.SpawnPet(slea, c, c.getPlayer()));
                register(h, CP_UserRegisterPetAutoBuffRequest, (slea, c, cs) -> PetHandler.Pet_AutoBuff(slea, c, c.getPlayer()));
                register(h, PREVIEW_CHOICE_BEAUTY_CARD, (slea, c, cs) -> PlayerHandler.previewChoiceBeautyCard(slea, c, c.getPlayer()));
                register(h, CP_PetMove, (slea, c, cs) -> PetHandler.MovePet(slea, c.getPlayer()));
                register(h, CP_PetAction, (slea, c, cs) -> PetHandler.PetChat(slea, c, c.getPlayer()));
                register(h, CP_PetInteractionRequest, (slea, c, cs) -> PetHandler.PetCommand(slea, c, c.getPlayer()));
                register(h, CP_UserPetFoodItemUseRequest, (slea, c, cs) -> PetHandler.PetFood(slea, c, c.getPlayer()));
                register(h, CP_PetDropPickUpRequest, (slea, c, cs) -> InventoryHandler.Pickup_Pet(slea, c, c.getPlayer()));
                register(h, CP_PetStatChangeItemUseRequest, (slea, c, cs) -> PetHandler.Pet_AutoPotion(slea, c, c.getPlayer()));
                register(h, CP_PetUpdateExceptionListRequest, (slea, c, cs) -> PetHandler.PetExcludeItems(slea, c, c.getPlayer()));
                register(h, CP_PetFoodItemUseRequest, (slea, c, cs) -> {
                    slea.skip(4);
                    PetHandler.PetFood(slea, c, c.getPlayer());
                });
                register(h, CP_UserCashPetPickUpOnOffRequest, (slea, c, cs) -> PetHandler.AllowPetLoot(slea, c, c.getPlayer()));
                register(h, CP_UserCashPetSkillSettingRequest, (slea, c, cs) -> PetHandler.AllowPetAutoEat(slea, c, c.getPlayer()));
                register(h, CP_UserParcelRequest, (slea, c, cs) -> DueyHandler.DueyOperation(slea, c));
                register(h, CP_UserEntrustedShopRequest, (slea, c, cs) -> HiredMerchantHandler.UseHiredMerchant(c, true));
                register(h, CP_UserStoreBankRequest, (slea, c, cs) -> HiredMerchantHandler.MerchantItemStore(slea, c));
                register(h, FISHING, (slea, c, cs) -> HiredFisherHandler.UseHiredFisher(slea, c.getPlayer()));
                register(h, CP_UserRepairDurability, (slea, c, cs) -> NPCHandler.repair(slea, c));
                register(h, CP_UserRepairDurabilityAll, (slea, c, cs) -> NPCHandler.repairAll(c));
                register(h, CP_ShopScannerRequest, (slea, c, cs) -> InventoryHandler.Owl(slea, c));
                register(h, CP_ShopLinkRequest, (slea, c, cs) -> InventoryHandler.OwlWarp(slea, c));
                register(h, CP_UserShopScannerItemUseRequest, (slea, c, cs) -> InventoryHandler.OwlMinerva(slea, c));
                register(h, CP_RPSGame, (slea, c, cs) -> NPCHandler.RPSGame(slea, c));
                register(h, CP_UserFollowCharacterRequest, (slea, c, cs) -> PlayersHandler.FollowRequest(slea, c));
                register(h, CP_SetPassenserResult, (slea, c, cs) -> PlayersHandler.FollowReply(slea, c));
                register(h, CP_UserFollowCharacterWithdraw, (slea, c, cs) -> PlayersHandler.FollowReply(slea, c));
                register(h, CP_MarriageRequest, (slea, c, cs) -> PlayersHandler.RingAction(slea, c));
                register(h, SOLOMON, (slea, c, cs) -> PlayersHandler.Solomon(slea, c));
                register(h, GACH_EXP, (slea, c, cs) -> PlayersHandler.GachExp(slea, c));
                register(h, CP_PartyMemberCandidateRequest, (slea, c, cs) -> PartyHandler.MemberSearch(slea, c));
                register(h, CP_PartyCandidateRequest, (slea, c, cs) -> PartyHandler.PartySearch(slea, c));
                register(h, CP_PartyAdverRequest, (slea, c, cs) -> PartyHandler.PartyListing(slea, c));
                register(h, CP_ExpeditionRequest, (slea, c, cs) -> PartyHandler.Expedition(slea, c));
                register(h, CP_UserMapTransferItemUseRequest, (slea, c, cs) -> InventoryHandler.TeleRock(slea, c));
//                register(h, PAM_SONG, (slea, c, cs) -> InventoryHandler.PamSong(slea, c));
                register(h, CP_UserClaimRequest, (slea, c, cs) -> PlayersHandler.Report(slea, c));
                register(h, CP_UserRemoteShopOpenRequest, (slea, c, cs) -> HiredMerchantHandler.RemoteStore(slea, c));
                register(h, USE_CONTENT_MAP_MINI, (slea, c, cs) -> PlayerHandler.UseContentMap(slea, c, c.getPlayer()));
                register(h, USE_CONTENT_MAP, (slea, c, cs) -> PlayerHandler.UseContentMap(slea, c, c.getPlayer()));
                register(h, SHIKONGJUAN, (slea, c, cs) -> PlayerHandler.UseChronosphere(slea, c, c.getPlayer()));
                register(h, PLAYER_UPDATE, (slea, c, cs) -> PlayerHandler.PlayerUpdate(c, c.getPlayer()));
                register(h, CP_UserTransferFreeMarketRequest, (slea, c, cs) -> PlayerHandler.ChangeMarketMap(slea, c, c.getPlayer()));
                register(h, DEL_TEACH_SKILL, (slea, c, cs) -> PlayerHandler.DelTeachSkill(slea, c, c.getPlayer()));
                register(h, SET_TEACH_SKILL, (slea, c, cs) -> PlayerHandler.SetTeachSkill(slea, c, c.getPlayer()));
                register(h, SET_CHAR_CASH, (slea, c, cs) -> PlayerHandler.showPlayerCash(slea, c));
                register(h, CP_UserFieldTransferRequest, (slea, c, cs) -> PlayerHandler.fieldTransferRequest(slea, c.getPlayer()));
                register(h, OPEN_WORLDMAP, (slea, c, cs) -> c.announce(MaplePacketCreator.openWorldMap()));
                register(h, Auto5thRevenant_ReduceAnger, (slea, c, cs) -> PlayerHandler.Auto5thRevenant_ReduceAnger(slea, c.getPlayer()));
                register(h, Auto5thRevenant_ReduceHP, (slea, c, cs) -> PlayerHandler.Auto5thRevenantReduceHP(slea, c.getPlayer()));
                register(h, SilhouetteMirageCharge, (slea, c, cs) -> PlayerHandler.SilhouetteMirageCharge(slea, c.getPlayer()));
                register(h, UseJupiterThunder, (slea, c, cs) -> PlayerHandler.UseJupiterThunder(slea, c.getPlayer()));
                register(h, JupiterThunderAction, (slea, c, cs) -> PlayerHandler.JupiterThunderAction(slea, c.getPlayer()));
                register(h, JupiterThunderEnd, (slea, c, cs) -> PlayerHandler.JupiterThunderEnd(slea, c.getPlayer()));
                register(h, Auto5thGoddessBless, (slea, c, cs) -> PlayerHandler.Auto5thGoddessBless(slea, c.getPlayer()));
                register(h, CP_GoldHammerRequest, (slea, c, cs) -> UseHammerHandler.UseHammer(slea, c));
                register(h, CP_GoldHammerComplete, (slea, c, cs) -> {
                    slea.skip(4);
                    c.announce(MTSCSPacket.sendGoldHammerResult(2, slea.readInt()));
                });
                register(h, CP_PlatinumHammerRequest, (slea, c, cs) -> UseHammerHandler.PlatinumHammerResponse(slea, c));
                register(h, CP_BattleRecordOnOffRequest, (slea, c, cs) -> PlayerHandler.startBattleStatistics(slea, c));
                register(h, CP_UserRequestSetStealSkillSlot, (slea, c, cs) -> PhantomMemorySkill.MemorySkillChoose(slea, c));
                register(h, CP_UserRequestStealSkillMemory, (slea, c, cs) -> PhantomMemorySkill.MemorySkillChange(slea, c));
                register(h, CP_UserRequestStealSkillList, (slea, c, cs) -> PhantomMemorySkill.UserRequestStealSkillList(slea, c));
                register(h, PLAYER_VIEW_RANGE, (slea, c, cs) -> {
                    byte by2 = slea.readByte();
                    if (by2 == 1) {
                        c.sendEnableActions();
                    }
                });
                register(h, CP_EgoEquipCreateUpgradeItemCostRequest, (slea, c, cs) -> EgoEquipHandler.EgoEquipCreateUpgradeItemCostRequest(slea, c, c.getPlayer()));
                //register(h, EgoEquipCreateUpgradeItem, (slea, c, cs) -> ItemScrollHandler.ChangeWeaponPotential_WP(slea, c, c.getPlayer()));
                register(h, CP_EgoEquipGaugeCompleteReturn, (slea, c, cs) -> EgoEquipHandler.EgoEquipGaugeCompleteReturn(slea, c, c.getPlayer()));
                register(h, CP_EgoEquipTalkRequest, (slea, c, cs) -> EgoEquipHandler.EgoEquipTalkRequest(slea, c, c.getPlayer()));
                register(h, CP_EgoEquipCheckUpdateItemRequest, (slea, c, cs) -> EgoEquipHandler.EgoEquipCheckUpdateItemRequest(slea, c, c.getPlayer()));
                register(h, CP_InheritanceInfoRequest, (slea, c, cs) -> EgoEquipHandler.InheritanceInfoRequest(slea, c, c.getPlayer()));
                register(h, CP_InheritanceUpgradeRequest, (slea, c, cs) -> EgoEquipHandler.InheritanceUpgradeRequest(slea, c, c.getPlayer()));
                register(h, CP_UserRequestFlyingSwordStart, (slea, c, cs) -> PlayerHandler.useTempestBlades(slea, c, c.getPlayer()));
                register(h, BossPartyCheckRequest, (slea, c, cs) -> PlayerHandler.BossPartyCheckRequest(slea, c));
                register(h, CP_WaitQueueRequest, (slea, c, cs) -> PlayerHandler.WaitQueueRequest(slea, c));
                register(h, CP_CheckTrickOrTreatRequest, (slea, c, cs) -> c.announce(MaplePacketCreator.CheckTrickOrTreatRequest()));
                register(h, CP_CheckProcess, (slea, c, cs) -> SystemProcess.SystemProcess(slea, c, c.getPlayer()));
                register(h, SPECIAL_OPERATION, (slea, c, cs) -> PlayerHandler.specialOperation(slea, c, c.getPlayer()));
                register(h, SOUL_MODE, (slea, c, cs) -> PlayerHandler.updateSoulEffect(slea, c, c.getPlayer()));
                register(h, USE_TOWERCHAIR_SETTING, (slea, c, cs) -> PlayerHandler.UseTowerChairSetting(slea, c, c.getPlayer()));
                register(h, VMATRIX_MAKE_REQUEST, (slea, c, cs) -> PlayerHandler.VCoreOperation(slea, c, c.getPlayer()));
                register(h, VMATRIX_HELP_REQUEST, (slea, c, cs) -> PlayerHandler.VmatrixHelpRequest(slea, c.getPlayer()));
                register(h, VMATRIX_VERIFY, (slea, c, cs) -> PlayerHandler.VmatrixVerify(slea, c));
                register(h, SkillStageChangeRequest, (slea, c, cs) -> PlayerHandler.SkillStageChangeRequest(slea, c, c.getPlayer()));
                register(h, SIGNIN_OPERATION, (slea, c, cs) -> PlayerHandler.DailyGiftRequest(slea, c, c.getPlayer()));
                register(h, SKILL_ONOFF, (slea, c, cs) -> PlayerHandler.handleSkillOnOff(slea, c, c.getPlayer()));
                register(h, AvatarEffectSkillOnOff, (slea, c, cs) -> PlayerHandler.AvatarEffectSkillOnOff(slea, c, c.getPlayer()));
                register(h, RevolvingCannonRequest, (slea, c, cs) -> PlayerHandler.handleRevolvingCannon(slea, c.getPlayer()));
                register(h, MULTI_SKILL_ATTACK_REQUEST, (slea, c, cs) -> PlayerHandler.MultiSkillAttackRequest(slea, c, c.getPlayer()));
                register(h, MULTI_SKILL_CHARGE_REQUEST, (slea, c, cs) -> PlayerHandler.MultiSkillChargeRequest(slea, c.getPlayer()));
                register(h, MULTI_SKILL_TIMEOUT_CHARGE_REQUEST, (slea, c, cs) -> PlayerHandler.MultiSkillTimeoutChargeRequest(slea, c.getPlayer()));
                register(h, ReincarnationModeSelect, (slea, c, cs) -> PlayerHandler.ReincarnationModeSelect(slea, c.getPlayer()));
                register(h, CreateForceAtomObject, (slea, c, cs) -> PlayerHandler.CreateForceAtomObject(slea, c.getPlayer()));
                register(h, DivineJudgmentStatReset, (slea, c, cs) -> PlayerHandler.DivineJudgmentStatReset(slea, c.getPlayer()));
                register(h, SpeedMirageObjectCreate, (slea, c, cs) -> PlayerHandler.SpeedMirageObjectCreate(slea, c.getPlayer()));
                register(h, ApplyAffectAreaEffect, (slea, c, cs) -> PlayerHandler.ApplyAffectAreaEffect(slea, c.getPlayer()));
                register(h, CHARGE_INFINITE_FLAME, (slea, c, cs) -> PlayerHandler.ChargeInfiniteFlame(slea, c));
                register(h, CHARGE_PRIMAL_GRENADE, (slea, c, cs) -> PlayerHandler.ChargePrimalGrenade(slea, c));
                register(h, ADELE_CHARGE_REQUEST, (slea, c, cs) -> AdeleHandler.AdeleChargeRequest(slea, c, c.getPlayer()));
                register(h, MaliceChargeRequest, (slea, c, cs) -> PlayerHandler.MaliceChargeRequest(slea, c, c.getPlayer()));
                register(h, LaraSkillChargeRequest, (slea, c, cs) -> PlayerHandler.LaraSkillChargeRequest(slea, c, c.getPlayer()));
                register(h, PoisonAreaCreate, (slea, c, cs) -> PlayerHandler.PoisonAreaCreate(slea, c, c.getPlayer()));
                register(h, POTION_POT_USE, (slea, c, cs) -> PotionPotHandler.PotionPotUse(slea, c, c.getPlayer()));
                register(h, POTION_POT_ADD, (slea, c, cs) -> PotionPotHandler.PotionPotAdd(slea, c, c.getPlayer()));
                register(h, POTION_POT_MODE, (slea, c, cs) -> PotionPotHandler.PotionPotMode(slea, c, c.getPlayer()));
                register(h, POTION_POT_INCR, (slea, c, cs) -> PotionPotHandler.PotionPotIncr(slea, c, c.getPlayer()));
                register(h, APPLY_HYUNCUBE, (slea, c, cs) -> InventoryHandler.applyHyunCube(slea, c, c.getPlayer()));
                register(h, CP_ZeroTag, (slea, c, cs) -> PlayerHandler.zeroTag(slea, c, c.getPlayer()));
                register(h, CP_ZeroShareCashEquipPart, (slea, c, cs) -> PlayerHandler.changeZeroLook(slea, c, c.getPlayer(), false));
                register(h, CP_UserFinalAttackRequest, (slea, c, cs) -> PlayerHandler.ExtraAttack(slea, c, c.getPlayer()));
                register(h, CREATE_AFFECTED_AREA_REQUEST, (slea, c, cs) -> PlayerHandler.spawnSpecial(slea, c, c.getPlayer()));
                register(h, CP_UserB2BodyRequest, (slea, c, cs) -> PlayerHandler.MoveEnergyBall(slea, c));
                register(h, HIDDEN_TAIL_ADN_EAR, (slea, c, cs) -> PlayerHandler.HideTailAndEar(slea, c, c.getPlayer()));
                register(h, USER_TRUMP_SKILL_ACTION_REQUEST, (slea, c, cs) -> PlayerHandler.UserTrumpSkillActionRequest(slea, c.getPlayer()));
                register(h, DOT_HEAL_HP_REQUEST, (slea, c, cs) -> PlayerHandler.DotHealHPMPRequest(c.getPlayer()));
                register(h, CP_UserDotHeal, (slea, c, cs) -> PlayerHandler.DotHealHPMPRequest(c.getPlayer()));
                register(h, REWARD, (slea, c, cs) -> PlayerHandler.onReward(slea, c));
                register(h, EFFECT_SWITCH, (slea, c, cs) -> PlayerHandler.effectSwitch(slea, c));
                register(h, CASH_ITEM_OP_REQUEST, (slea, c, cs) -> PlayerHandler.cashItemOpRequest(slea, c));
                register(h, TMS_SPECIAL_REQUEST, (slea, c, cs) -> PlayerHandler.tmsSpecialRequest(slea, c));
                register(h, CALL_FRIENDS, (slea, c, cs) -> PlayerHandler.callFriends(slea, c, c.getPlayer()));
                register(h, SELECT_CHAIR, (slea, c, cs) -> PlayerHandler.selectChair(slea, c, c.getPlayer()));
                register(h, TAP_JOY_RESPONSE, (slea, c, cs) -> UseCashItemHandler.TapJoyResponse(slea, c.getPlayer()));
                register(h, TAP_JOY_DONE, (slea, c, cs) -> UseCashItemHandler.TapJoyDone(slea, c.getPlayer()));
                register(h, TAP_JOY_NEXT_STAGE, (slea, c, cs) -> UseCashItemHandler.TapJoyNextStage(slea, c.getPlayer()));
                register(h, OpenMapleUnionRequest, (slea, c, cs) -> PlayerHandler.openMapleUnionRequest(c.getPlayer()));
                register(h, UPDATE_BULLET_COUNT, (slea, c, cs) -> PlayerHandler.updateBulletCount(slea, c.getPlayer()));
                register(h, MapleUnionRequest, (slea, c, cs) -> PlayerHandler.handleMapleUnion(slea, c.getPlayer()));
                register(h, LucidSpecialHorn, (slea, c, cs) -> LucidHandler.handleSpecialHorn(slea, c.getPlayer()));
                register(h, LucidSpecialAttackEnd, (slea, c, cs) -> LucidHandler.handleSpecialAttackEnd(slea, c.getPlayer()));
                register(h, EventReviveRequest, (slea, c, cs) -> PlayerHandler.EventReviveRequest(slea, c, c.getPlayer()));
                register(h, RemoteControlDiceNumber, (slea, c, cs) -> PlayerHandler.handleRemoteControlDice(slea, c.getPlayer()));
                register(h, ForceTargetRequest, (slea, c, cs) -> PlayerHandler.GhostArrowHandler(slea, c.getPlayer()));
                register(h, UserArcaneForceRequest, (slea, c, cs) -> InventoryHandler.arcaneForceRequest(slea, c.getPlayer()));
                register(h, UserAuthenticForceRequest, (slea, c, cs) -> InventoryHandler.authenticForceRequest(slea, c.getPlayer()));
                register(h, CP_MobSkillDelayEnd, (slea, c, cs) -> MobSkillDelayEndHandler.handlePacket(slea, c));
                register(h, Ping_ClientToGamge, (slea, c, cs) -> {
                    if (c.getPlayer() == null || c.getPlayer().getMap() == null) {
                        return;
                    }
                    int i = slea.readInt();
                    c.getPlayer().updateTick(i);
                    c.getPlayer().getCheatTracker().setLastChannelTick(i);
                    c.getPlayer().getCheatTracker().setLastEnterChannel();
                });
                register(h, VAddSkillAttackRequest, (slea, c, cs) -> PlayerHandler.VAddSkillAttackRequest(slea, c, c.getPlayer()));
                register(h, CP_MobCrcDataResult, (slea, c, cs) -> PlayerHandler.OverloadModeResult(c.getPlayer()));
                register(h, CP_RequestSetHpBaseDamage, (slea, c, cs) -> PlayerHandler.RequestSetHpBaseDamage(c.getPlayer()));
                register(h, CP_RequestSetBlessOfDarkness, (slea, c, cs) -> PlayerHandler.RequestSetBlessOfDarkness(c.getPlayer()));
                register(h, CP_UserForceAtomCollision, (slea, c, cs) -> PlayerHandler.UserForceAtomCollision(slea, c, c.getPlayer()));
                register(h, DimensionMirrorMove, (slea, c, cs) -> PlayerHandler.DimensionMirrorMove(slea, c, c.getPlayer()));
                register(h, CP_MobCrcKeyChangedReply, (slea, c, cs) -> PlayerHandler.DevilFrenzyResult(slea, c, c.getPlayer()));
                register(h, CP_UserChangeSoulCollectionRequest, (slea, c, cs) -> PlayerHandler.UserChangeSoulCollectionRequest(slea, c, c.getPlayer()));
                register(h, ComboCheckRequest, (slea, c, cs) -> PlayerHandler.ComboCheckRequest(slea, c, c.getPlayer()));
                register(h, PoisonAreaRemove, (slea, c, cs) -> PlayerHandler.PoisonAreaRemove(slea, c.getPlayer()));
                register(h, JobFreeChangeRequest, (slea, c, cs) -> PlayerHandler.JobFreeChangeRequest(slea, c.getPlayer()));
                register(h, ErosionsrReduce, (slea, c, cs) -> PlayerHandler.ErosionsrReduce(slea, c, c.getPlayer()));
                register(h, SelflessState, (slea, c, cs) -> PlayerHandler.SelflessState(slea, c, c.getPlayer()));
                register(h, CP_ReqMakingSkillEff, (slea, c, cs) -> PlayerHandler.ReqMakingSkillEff(slea, c, c.getPlayer()));
                register(h, UserSetCustomizeEffect, (slea, c, cs) -> PlayerHandler.UserSetCustomizeEffect(slea, c, c.getPlayer()));
                register(h, CP_TowerRankRequest, (slea, c, cs) -> PlayerHandler.TowerRankRequest(slea, c, c.getPlayer()));
                register(h, CP_MobHitByMob, (slea, c, cs) -> MobHandler.MobHitByMob(slea, c, c.getPlayer()));
                register(h, CP_UserCalcDamageStatSetRequest, (slea, c, cs) -> PlayerHandler.UserCalcDamageStatSetRequest(slea, c, c.getPlayer()));
                register(h, MonsterCollectionCompleteRewardRequest, (slea, c, cs) -> MonsterCollectionHandler.CompleteRewardRequest(slea, c, c.getPlayer()));
                register(h, MonsterCollectionExploreRequest, (slea, c, cs) -> MonsterCollectionHandler.ExploreRequest(slea, c, c.getPlayer()));
                register(h, UserCharacterPotentialRequest, (slea, c, cs) -> PlayerHandler.UserCharacterPotentialRequest(slea, c, c.getPlayer()));
                register(h, CP_UserTemporaryStatUpdateRequest, (slea, c, cs) -> PlayerHandler.UserTemporaryStatUpdateRequest(slea, c, c.getPlayer()));
                register(h, ExitGaintBoss, (slea, c, cs) -> NPCHandler.ExitGaintBoss(c, c.getPlayer()));
                register(h, CP_MobAttackMob, (slea, c, cs) -> MobHandler.MobAttackMob(slea, c, c.getPlayer()));
                register(h, CP_MobEscortCollision, (slea, c, cs) -> MobHandler.MobEscortCollision(slea, c, c.getPlayer()));
                register(h, CP_MobRequestEscortInfo, (slea, c, cs) -> MobHandler.MobRequestEscortInfo(slea, c, c.getPlayer()));
                register(h, CrystalCharge, (slea, c, cs) -> PlayerHandler.CrystalCharge(slea, c, c.getPlayer()));
                register(h, UserRunScript, (slea, c, cs) -> PlayerHandler.RunScript(slea, c, c.getPlayer()));
                register(h, WillBeholderHit, (slea, c, cs) -> BossWillHandler.WillBeholderHit(slea, c, c.getPlayer()));
                register(h, UseMoonlight, (slea, c, cs) -> BossWillHandler.UseMoonlight(slea, c, c.getPlayer()));
                register(h, WillNarrowWebDamage, (slea, c, cs) -> BossWillHandler.WillNarrowWebDamage(slea, c, c.getPlayer()));
                register(h, CHANGE_ANDROID_ANTENNA, (slea, c, cs) -> PlayerHandler.ChangeAndroidAntenna(slea, c, c.getPlayer()));
                register(h, MapleUnionPresetRequest, (slea, c, cs) -> PlayerHandler.MapleUnionPresetRequest(slea, c, c.getPlayer()));
                register(h, ForceAtomNextTarget, (slea, c, cs) -> PlayerHandler.ForceAtomNextTarget(slea, c, c.getPlayer()));
                register(h, CP_ForceAtomObjectAction, (slea, c, cs) -> AdeleHandler.ForceAtomObjectAction(slea, c, c.getPlayer()));
                register(h, CP_ForceAtomObjectRemove, (slea, c, cs) -> AdeleHandler.ForceAtomObjectRemove(slea, c, c.getPlayer()));
                register(h, CP_ForceAtomObjectMove, (slea, c, cs) -> AdeleHandler.ForceAtomObjectMove(slea, c, c.getPlayer()));
                register(h, HoYoungHealRequest, (slea, c, cs) -> PlayerHandler.HoYoungHealRequest(slea, c, c.getPlayer()));
                register(h, CP_UserRenameRequest, (slea, c, cs) -> PlayerHandler.ChangeNameRequest(slea, c, c.getPlayer()));
                register(h, CheckSPWOnRename, (slea, c, cs) -> PlayerHandler.ChangeNamePwCheck(slea, c, c.getPlayer()));
                register(h, CombingRoomActionReq, (slea, c, cs) -> PlayerHandler.CombingRoomActionReq(slea, c, c.getPlayer()));
                register(h, SurplusSupplyRecover, (slea, c, cs) -> PlayerHandler.SurplusSupplyRecover(slea, c.getPlayer()));
                break;
        }

        return h;
    }

    private static void register(MaplePacketHandler[] handlers, RecvPacketOpcode opcode, MaplePacketHandler handler) {
        final short value = opcode.getValue();
        if (value > 0 && value < RecvPacketOpcode.Count.getValue()) {
            if (handlers[value] != null) {
                log.error("[包頭值重複] opcode:" + opcode.name() + " value: " + value);
            }
            handlers[value] = handler;
        }
    }
}
